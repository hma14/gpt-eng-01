{"ast":null,"code":"var _jsxFileName = \"H:\\\\programs\\\\openai\\\\my-gpt-webapp\\\\gpt-engineer\\\\projects\\\\proj01\\\\workspace\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport UserList from './UserList';\nimport UserForm from './UserForm';\nimport { get_Users, update_User, add_User, delete_User } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n  useEffect(() => {}, [data]);\n  const fetchUsers = async () => {\n    try {\n      const response = await get_Users();\n      setData(response);\n    } catch (error) {\n      console.error(\"Error fetching data: \", error);\n    }\n  };\n  const addUser = async user => {\n    console.log(\"user.first_name 3 = \", user.first_name);\n    const response = await add_User(user);\n    if (response !== null && response !== void 0 && response._id) {\n      fetchUsers();\n    }\n  };\n  const updateUser = async user => {\n    const response = await update_User(user._id, user);\n    if (response.data.success) {\n      fetchUsers();\n    }\n  };\n  const deleteUser = async user => {\n    const response = await delete_User(user._id);\n    if (response.data.success) {\n      fetchUsers();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(UserList, {\n      data: data,\n      onDelete: deleteUser,\n      onUpdate: updateUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserForm, {\n      onAdd: addUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MNW7rnkI9oNPb711ySWHHHkbM9Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","UserList","UserForm","get_Users","update_User","add_User","delete_User","jsxDEV","_jsxDEV","App","_s","data","setData","fetchUsers","response","error","console","addUser","user","log","first_name","_id","updateUser","success","deleteUser","className","children","onDelete","onUpdate","fileName","_jsxFileName","lineNumber","columnNumber","onAdd","_c","$RefreshReg$"],"sources":["H:/programs/openai/my-gpt-webapp/gpt-engineer/projects/proj01/workspace/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport UserList from './UserList';\r\nimport UserForm from './UserForm';\r\nimport { get_Users, update_User, add_User, delete_User } from './api';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchUsers(); \r\n  }, []);\r\n\r\n  useEffect(() => {\r\n  }, [data]);\r\n\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const response =  await get_Users();\r\n      setData(response)      \r\n    } catch (error) {\r\n      console.error(\"Error fetching data: \", error)\r\n    }\r\n\r\n  };\r\n\r\n\r\n  const addUser = async (user) => {\r\n    console.log(\"user.first_name 3 = \", user.first_name)\r\n    const response = await add_User(user);\r\n    if (response?._id) {\r\n      fetchUsers();\r\n    }\r\n  };\r\n\r\n  const updateUser = async (user) => {\r\n    const response = await update_User(user._id, user);\r\n    \r\n    if (response.data.success) {\r\n      fetchUsers();\r\n    }\r\n  };\r\n\r\n  const deleteUser = async (user) => {\r\n    const response = await delete_User(user._id);\r\n    if (response.data.success) {\r\n      fetchUsers();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <UserList data={data} onDelete={deleteUser} onUpdate={updateUser} />\r\n      <UserForm onAdd={addUser} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,SAAS,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACda,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAENb,SAAS,CAAC,MAAM,CAChB,CAAC,EAAE,CAACW,IAAI,CAAC,CAAC;EAGV,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAI,MAAMX,SAAS,CAAC,CAAC;MACnCS,OAAO,CAACE,QAAQ,CAAC;IACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EAEF,CAAC;EAGD,MAAME,OAAO,GAAG,MAAOC,IAAI,IAAK;IAC9BF,OAAO,CAACG,GAAG,CAAC,sBAAsB,EAAED,IAAI,CAACE,UAAU,CAAC;IACpD,MAAMN,QAAQ,GAAG,MAAMT,QAAQ,CAACa,IAAI,CAAC;IACrC,IAAIJ,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEO,GAAG,EAAE;MACjBR,UAAU,CAAC,CAAC;IACd;EACF,CAAC;EAED,MAAMS,UAAU,GAAG,MAAOJ,IAAI,IAAK;IACjC,MAAMJ,QAAQ,GAAG,MAAMV,WAAW,CAACc,IAAI,CAACG,GAAG,EAAEH,IAAI,CAAC;IAElD,IAAIJ,QAAQ,CAACH,IAAI,CAACY,OAAO,EAAE;MACzBV,UAAU,CAAC,CAAC;IACd;EACF,CAAC;EAED,MAAMW,UAAU,GAAG,MAAON,IAAI,IAAK;IACjC,MAAMJ,QAAQ,GAAG,MAAMR,WAAW,CAACY,IAAI,CAACG,GAAG,CAAC;IAC5C,IAAIP,QAAQ,CAACH,IAAI,CAACY,OAAO,EAAE;MACzBV,UAAU,CAAC,CAAC;IACd;EACF,CAAC;EAED,oBACEL,OAAA;IAAKiB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBlB,OAAA,CAACP,QAAQ;MAACU,IAAI,EAAEA,IAAK;MAACgB,QAAQ,EAAEH,UAAW;MAACI,QAAQ,EAAEN;IAAW;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpExB,OAAA,CAACN,QAAQ;MAAC+B,KAAK,EAAEhB;IAAQ;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEV;AAACtB,EAAA,CAnDQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAqDZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}